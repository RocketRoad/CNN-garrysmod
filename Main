import numpy as np
from grabscreen import grab_screen
import cv2
import time
import os
from directkeys import PressKey, ReleaseKey, W, A, S, D
from getkeys import key_check
from alexnet import alexnet

WIDTH = 80
HEIGHT = 60
LR = 1E-3
EPOCHS = 8
MODEL_NAME = 'pygarmod-buggy-{}-{}-{}-epochs.model'.format(LR, 'alexnetv2', EPOCHS)


def straight():
    PressKey(W)
    ReleaseKey(A)
    ReleaseKey(D)


def left():
    PressKey(A)
    PressKey(W)
    ReleaseKey(D)
    time.sleep(0.9)
    ReleaseKey(A)


def right():
    PressKey(D)
    PressKey(W)
    ReleaseKey(A)
    time.sleep(0.9)
    ReleaseKey(D)


model = alexnet(WIDTH, HEIGHT, LR)
model.load(MODEL_NAME)

# def keys_to_output(keys):
#     #[A, W, D] =
#     output = [0, 0, 0]
#     if 'A' in keys:
#         output[0] = 1
#     elif 'D' in keys:
#         output[2] = 1
#     else:
#         output[1] = 1
#     return output
#
# file_name = 'training_data.npy'
# if os.path.isfile(file_name):
#     print('File exist, loading previous data')
#     training_data = list(np.load(file_name))
# else:
#     print('File does not exist, starting fresh')
#     training_data = []


def main():
    # for i in list(range(4))[::-1]:
    #     print(i + 1)
    #     time.sleep(1)
    last_time = time.time()
    paused = True
    while True:
        if not paused:
            screen = grab_screen(region=(0, 40, 800, 640))
            screen = cv2.cvtColor(screen, cv2.COLOR_BGR2GRAY)
            screen = cv2.resize(screen, (80, 60))
            # keys = key_check()
            # output = keys_to_output(keys)
            # training_data.append([screen, output])
            print('Frame took {} seconds'.format(time.time() - last_time))
            last_time = time.time()
            prediction = model.predict([screen.reshape(WIDTH, HEIGHT, 1)])[0]
            moves = list(np.around(prediction))
            print(moves, prediction)
            turn_thresh = .60
            fwd_thresh = .75
            if moves == [1, 0, 0]:
                left()
            if moves == [0, 1, 0]:
                straight()
            if moves == [0, 0, 1]:
                right()

        keys = key_check()

        if 'T' in keys:
            if paused:
                paused = False
                time.sleep(1)
            else:
                paused = True
                ReleaseKey(A)
                ReleaseKey(D)
                ReleaseKey(W)
                time.sleep(1)

        # if len(training_data) % 500 == 0:
        #     print(len(training_data))
        #     np.save(file_name, training_data)


main()
